@model int
@using System.Web.Mvc;
@using EF.Services.Http;
@using EF.Services.Service;
@{
	<link rel="stylesheet" type="text/css" href="~/Areas/Admin/Content/fineuploader.min.css" />
	<script type="text/javascript" src="~/Areas/Admin/Scripts/fineuploader.min.js"></script>
	var random = EF.Core.CodeHelper.GenerateRandomInteger();
	var clientId = "picture" + random;
	var basePath = EF.Core.ContextHelper.Current.Resolve<IUrlHelper>().GetLocation(false);
	var pictureService = EF.Core.ContextHelper.Current.Resolve<IPictureService>();
	var settingService = EF.Core.ContextHelper.Current.Resolve<ISettingService>();
	var picture = pictureService.GetPictureById(Model);
	var fileTypesAllowedSetting = settingService.GetSettingByKey("PictureTypesAllowed").Value;
	var splitTypes = "";
	foreach (string type in fileTypesAllowedSetting.Split(','))
	{
		splitTypes += "'" + type + "',";
	}
	var maxSizeAllowedSetting = settingService.GetSettingByKey("MaximumSizeAllowed").Value;

}
<div id="fine-uploader-manual-trigger"></div>
<input type="hidden" id="uploadedfiles" name="uploadedfiles" value="" />
<div id="@(clientId + "value")">
	@Html.HiddenFor(x => x)
</div>
<script type="text/template" id="@(clientId)-qq-template-manual-trigger">
	<div class="qq-uploader-selector qq-uploader" qq-drop-area-text="Drop files here">
		<div class="qq-total-progress-bar-container-selector qq-total-progress-bar-container">
			<div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-total-progress-bar-selector qq-progress-bar qq-total-progress-bar"></div>
		</div>
		<div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
			<span class="qq-upload-drop-area-text-selector"></span>
		</div>
		<div class="buttons">
			<div class="qq-upload-button-selector qq-upload-button">
				<div>Select Pictures</div>
			</div>
			<button type="button" id="trigger-upload" class="btn btn-primary">
				<i class="icon-upload icon-white"></i> Upload
			</button>
		</div>
		<span class="qq-drop-processing-selector qq-drop-processing">
			<span>Processing dropped files...</span>
			<span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
		</span>
		<ul class="qq-upload-list-selector qq-upload-list" aria-live="polite" aria-relevant="additions removals">
			<li>
				<div class="qq-progress-bar-container-selector">
					<div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-progress-bar-selector qq-progress-bar"></div>
				</div>
				<span class="qq-upload-spinner-selector qq-upload-spinner"></span>
				<img class="qq-thumbnail-selector" qq-max-size="100" qq-server-scale>
				<span class="qq-upload-file-selector qq-upload-file"></span>
				<span class="qq-edit-filename-icon-selector qq-edit-filename-icon" aria-label="Edit filename"></span>
				<input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">
				<span class="qq-upload-size-selector qq-upload-size"></span>
				<button type="button" class="qq-btn qq-upload-cancel-selector qq-upload-cancel">Cancel</button>
				<button type="button" class="qq-btn qq-upload-retry-selector qq-upload-retry">Retry</button>
				<button type="button" class="qq-btn qq-upload-delete-selector qq-upload-delete">Delete</button>
				<span role="status" class="qq-upload-status-text-selector qq-upload-status-text"></span>
			</li>
		</ul>

		<dialog class="qq-alert-dialog-selector">
			<div class="qq-dialog-message-selector"></div>
			<div class="qq-dialog-buttons">
				<button type="button" class="qq-cancel-button-selector">Close</button>
			</div>
		</dialog>

		<dialog class="qq-confirm-dialog-selector">
			<div class="qq-dialog-message-selector"></div>
			<div class="qq-dialog-buttons">
				<button type="button" class="qq-cancel-button-selector">No</button>
				<button type="button" class="qq-ok-button-selector">Yes</button>
			</div>
		</dialog>

		<dialog class="qq-prompt-dialog-selector">
			<div class="qq-dialog-message-selector"></div>
			<input type="text">
			<div class="qq-dialog-buttons">
				<button type="button" class="qq-cancel-button-selector">Cancel</button>
				<button type="button" class="qq-ok-button-selector">Ok</button>
			</div>
		</dialog>
	</div>
</script>
<script type="text/javascript">
	$(document).ready(function () {
		var pictureArray = [];

		var manualUploader = new qq.FineUploader({
			element: document.getElementById('fine-uploader-manual-trigger'),
			template: '@(clientId)-qq-template-manual-trigger',
			request: {
				endpoint: '@(Url.Content("~/Admin/Picture/AsyncPictureUpload"))'
			},
			thumbnails: {
				placeholders: {
					waitingPath: '../../../../Content/images/waiting-generic.png',
					notAvailablePath: '../../../../Content/images/not_available-generic.png'
				}
			},
			validation: {
				allowedExtensions: ['jpeg', 'jpg', 'png'],
				itemLimit: 10,
				sizeLimit: 500000 // 50 kB = 50 * 1024 bytes
			},
			signature: {
				endpoint: ""
			},
			cors: {
				expected: true
			},
			chunking: {
				enabled: true
			},
			resume: {
				enabled: true
			},
			deleteFile: {
				enabled: true,
				method: "POST",
				endpoint: '@(Url.Content("~/Admin/Picture/DeletePicture"))'
			},
			callbacks: {
				onComplete: function (id, name, response) {
					if (response.success) {
						if ($("#uploadedfiles").val() !== "" && ($("#uploadedfiles").val().indexOf(",") > -1)) {
							$("#uploadedfiles").val(removeValue($("#uploadedfiles").val(), response.PictureId, ","));
						}
						else {
							$("#uploadedfiles").val(response.PictureId);
						}
						pictureArray.push({
							Picture: response.Picture,
							PictureId: response.PictureId,
							StartDate: response.StartDate,
							EndDate: response.EndDate,
							Default: response.Default,
							DisplayOrder: response.DisplayOrder
					});
						// Add In Grid
						//var pictureRow = '<tr>';
						//pictureRow += '<td>';
						//pictureRow += '<img name="Picture" src="' + response.Picture + '">';
						//pictureRow += '</td>';
						//  pictureRow += '<td>';
						//pictureRow += '<img name="PicStartDate" src="' + response.Picture + '">';
						//pictureRow += '</td>';
						//  pictureRow += '<td>';
						//pictureRow += '<img name="PicEndDate" src="' + response.Picture + '">';
						//pictureRow += '</td>';
						//  pictureRow += '<td>';
						//pictureRow += '<img name="DisplayOrder" src="' + response.Picture + '">';
						//pictureRow += '</td>';
						//  pictureRow += '<td>';
						//  pictureRow += '<img src="' + response.imageUrl + '">';
						//  pictureRow += '</td>';
						//pictureRow += '<tr>';

						//$("#eventpictures-grid tbody").append(pictureRow);
					}
				}
			},
			autoUpload: false,
			debug: false
		});

		qq(document.getElementById("trigger-upload")).attach("click", function() {
			manualUploader.uploadStoredFiles();
			var source = { jsondata: JSON.stringify(pictureArray), datatype: "json" };
			$("#eventpictures-grid").jqGrid('setGridParam', { data: source });
			$('#eventpictures-grid').trigger('reloadGrid');
		});

		function imagerenderer(row, datafield, value) {
			return '<img style="margin-left: 5px;" height="60" width="50" src="../../images/' + value + '"/>';
		}
	});
</script>
