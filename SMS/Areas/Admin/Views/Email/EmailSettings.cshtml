@model SMS.Models.EmailSettingsModel
@{
    ViewBag.Title = "Email Settings";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}
<div class="row">
    <div class="col-md-12 mr-4">
        <section class="setting-form">
            @using (Html.BeginForm("EmailSettings", "Email", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal" }))
            {
                @Html.AntiForgeryToken()
                <div class="row">
                    <div id="admin-page-header" class="col-xs-12 col-md-12">
                        <h3 class="section-heading mr-auto">EMAIL SETTINGS</h3>
                        <input type="submit" value="Save Settings" class="btn btn-primary mr-auto" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    </div>
                </div>
                <hr />
                <div class="row text-left">
                    <div class="col-xs-12 col-md-4 mb-4">
                        <div class="md-form">
                            <i class="fa fa-user-circle prefix"></i>
                            @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control", @autocomplete = "false", @type = "email", @tabindex = "1", @maxlength = "100" } })
                            @Html.LabelFor(model => model.Username, "Email Address", new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row text-left">
                    <div class="col-xs-12 col-md-4 mb-4">
                        <div class="md-form">
                            <i class="fa fa-key prefix"></i>
                            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @autocomplete = "new-password", @type = "password", @tabindex = "2", @maxlength = "20" } })
                            @Html.LabelFor(model => model.Password, "Password", new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row text-left">
                    <div class="col-xs-12 col-md-4 mb-4">
                        <div class="md-form">
                            <i class="fa fa-user-circle prefix"></i>
                            @Html.EditorFor(model => model.Host, new { htmlAttributes = new { @class = "form-control", @type = "text", @tabindex = "3", @maxlength = "400" } })
                            @Html.LabelFor(model => model.Host, "Host Address", new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.Host, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row text-left">
                    <div class="col-xs-12 col-md-4 mb-4">
                        <div class="md-form">
                            <i class="fa fa-cube prefix"></i>
                            @Html.EditorFor(model => model.Port, new { htmlAttributes = new { @class = "form-control", @tabindex = "4", @maxlength = "200", @value = Model.Port > 0 ? Model.Port.ToString() : string.Empty } })
                            @Html.LabelFor(model => model.Port, "Port", new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.Port, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row text-left">
                    <div class="col-xs-12 col-md-4 mb-4">
                        <div class="md-form">
                            <i class="fa fa-user prefix"></i>
                            @Html.EditorFor(model => model.FromEmail, new { htmlAttributes = new { @class = "form-control", @type = "email", @tabindex = "7", @maxlength = "200" } })
                            @Html.LabelFor(model => model.FromEmail, "From Email", new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.FromEmail, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-7 mb-4">
                        <input type="checkbox" id="EnableSSL" name="EnableSSL" value="@(Model.EnableSSL ? true : false)" @(Model.EnableSSL ? "checked=checked" : "") />
                        @Html.LabelFor(model => model.EnableSSL, "Enable SSL", new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.EnableSSL, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-7 mb-4">
                        <input type="checkbox" id="UseDefaultCredentials" name="UseDefaultCredentials" value="@(Model.UseDefaultCredentials ? true : false)" @(Model.UseDefaultCredentials ? "checked=checked" : "") />
                        @Html.LabelFor(model => model.UseDefaultCredentials, "Use Default Credentials", new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.UseDefaultCredentials, "", new { @class = "text-danger" })
                    </div>
                </div>}
        </section>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $("li.nav-item").removeClass("active");
        $("span.nav-title:contains('Settings')").closest("li").addClass("active");

        if ('@Model.EnableSSL' === 'True') {
            $("#EnableSSL").attr('checked', true).val(true);
        }
        else {
            $("#EnableSSL").attr('checked', false).val(false);
        }

        if ('@Model.UseDefaultCredentials' === 'True') {
            $("#UseDefaultCredentials").attr('checked', true).val(true);
        }
        else {
            $("#UseDefaultCredentials").attr('checked', false).val(false);
        }

        $("#EnableSSL").change(function () {
            if ($(this).attr('checked')) {
                $(this).attr('checked', true).val(true);
            }
            else {
                $(this).attr('checked', false).val(false);
            }
        });

        $("#UseDefaultCredentials").change(function () {
            if ($(this).attr('checked')) {
                $(this).attr('checked', true).val(true);
            }
            else {
                $(this).attr('checked', false).val(false);
            }
        });
    });
</script>