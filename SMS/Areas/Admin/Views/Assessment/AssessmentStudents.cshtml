@model SMS.Models.AssignStudentsModel
@using EF.Services;
@using System.Web.Optimization;
@using MVCEncrypt;
@{
    ViewBag.Title = "Assign Students To Assessment";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}
<div class="row">
    <div class="col-md-12 mr-4">
        <section class="edit-form">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                <div class="row">
                    <div id="admin-page-header" class="col-xs-12 col-md-12">
                        <h3 class="section-heading mr-auto">ASSIGN QUESTIONS TO ASSESSMENT</h3>
                        <a class="btn btn-info mr-auto" href="/Admin/Question/Create">CREATE QUESTION</a>
                        &nbsp;&nbsp;
                        @Html.ActionLink("CREATE ASSESSMENT", "Create", "Assessment", new { @class = "btn btn-info mr-auto" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 my-3">
                        <div class="tab-content card">
                            <div class="tab-pane fade in show active" id="assign-question-assessment" role="tabpanel">
                                <div class="row">
                                    <div class="col-md-12">
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                        @Html.HiddenFor(m => m.AssessmentId)
                                    </div>
                                </div>
                                <div class="row text-left">
                                    <div class="col-md-12">
                                        <h4 class="section-heading">@(Model.Assessment)</h4>
                                        <div class="table-responsive text-nowrap">
                                            <table class="table table-bordered table-primary dataTable">
                                                <thead>
                                                    <tr>
                                                        <th class="text-center">Name</th>
                                                        <th class="text-center">Start</th>
                                                        <th class="text-center">End</th>
                                                        <th class="text-center">Passing Marks</th>
                                                        <th class="text-center">Total Marks</th>
                                                        <th class="text-center">Subject</th>
                                                        <th class="text-center">Duration</th>
                                                        <th class="text-center">Time Bound</th>
                                                        <th class="text-center">Difficulty Level</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <tr>
                                                        <td class="text-center">@(Model.Assessment)</td>
                                                        <td class="text-center">
                                                            @(Model.StringStartTime)
                                                            @Html.HiddenFor(x => x.StringStartTime)
                                                        </td>
                                                        <td class="text-center">
                                                            @(Model.StringEndTime)
                                                            @Html.HiddenFor(x => x.StringEndTime)
                                                        </td>
                                                        <td class="text-center">@(Model.PassingMarks)</td>
                                                        <td class="text-center">@(Model.MaxMarks)</td>
                                                        <td class="text-center">@(Model.SubjectId.HasValue && Model.SubjectId.Value > 0 ? Model.Subject : "")</td>
                                                        <td class="text-center">
                                                            @(Model.Duration.HasValue && Model.Duration.Value > 0 ? (Model.Duration + " Mins.") : "-")
                                                            @Html.HiddenFor(x => x.Duration)
                                                        </td>
                                                        <td class="text-center">@(Model.IsTimeBound ? "Yes" : "No")</td>
                                                        <td class="text-center">@(Model.DifficultyLevel)</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                                <div class="row text-left">
                                    <div class="col">
                                        <div class="md-form">
                                            @Html.DropDownListFor(model => model.ClassDivisionId, Model.AvailableClassDivisions, "Select Class Division", new { @class = "mdb-select", @tabindex = "1", @title = "Select Class Division", @data_val="false" })
                                        </div>
                                    </div>
                                    <div class="col mt-3">
                                        <input type="submit" id="search-students" class="btn btn-info" name="continue-selection" value="Search Students" />
                                    </div>
                                </div>
                                <br />
                                <div class="row text-left">
                                    <div class="col-md-12 mb-4">
                                        <div class="table-responsive text-nowrap">
                                            <table class="table table-striped custom-table dataTable">
                                                <thead>
                                                    <tr>
                                                        <th class="text-center">
                                                            <div class="form-check">
                                                                <input type="checkbox" id="allcheck" class="table-check-input" @(Model.List.Count(x => x.IsChecked) == Model.List.Count ? "checked=checked" : "") value="allcheck" />
                                                                <label for="allcheck"></label>
                                                            </div>
                                                        </th>
                                                        <th class="text-center">Student</th>
                                                        <th class="text-center">Schedule</th>
                                                        <th class="text-center">Grade System</th>
                                                        <th class="text-center">Result Status</th>
                                                        <th class="text-center">Expired</th>
                                                        <th class="text-center">Completed</th>
                                                        <th class="text-center">Url</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @{ var count = 0; }
                                                    @foreach (var q in Model.List)
                                                    {
                                                        count += 1;
                                                        <tr>
                                                            @{var index = Model.List.IndexOf(q);}
                                                            <td>
                                                                <div class="form-check">
                                                                    <input type="checkbox" id="@(q.StudentId)" value="@(q.StudentId)" @(q.IsChecked ? "checked=checked" : "") name="SelectedStudent[]" class="table-check-input">
                                                                    <label class="form-check-label" for="@(q.StudentId)"></label>
                                                                </div>
                                                            </td>
                                                            <td>
                                                                <a tabindex="@(index.ToString())" target="_blank" href="/Admin/Student/Edit/@(q.StudentId)">@(q.Student)</a>
                                                            </td>
                                                            @{index += 1;}
                                                            <td>
                                                                <div class="row">
                                                                    <div class="col-sm-12">
                                                                        <div class="input-group pmd-textfield pmd-textfield-floating-label">
                                                                            <input class="form-control text-box single-line start-date" tabindex="@(index.ToString())" id="StartOn_@(q.StudentId)" name="StartOn_@(q.StudentId)" type="text" value="@(q.StartOn.Value.ToString("MMM dd, yyyy HH:mm tt"))" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="col-md-12 text-center">
                                                                        <label class="control-label" for="datepicker-start">To</label>
                                                                    </div>
                                                                    <div class="col-sm-12">
                                                                        <div class="form-group pmd-textfield pmd-textfield-floating-label">
                                                                            <input class="form-control text-box single-line end-date" tabindex="@(index.ToString())" id="EndOn_@(q.StudentId)" name="EndOn_@(q.StudentId)" type="text" value="@(q.EndOn.Value.ToString("MMM dd, yyyy HH:mm tt"))" />
                                                                            <script type="text/javascript">
                                                                                $(document).ready(function () {
                                                                                    $("#StartOn_@(q.StudentId)").datetimepicker({
                                                                                        format: 'MMM DD, YYYY hh:mm a',
                                                                                        inline: false,
                                                                                        sideBySide: true
                                                                                    }).on('dp.change', function (selected) {
                                                                                        $("#EndOn_@(q.StudentId)").datetimepicker('minDate', moment(selected.date.valueOf()));
                                                                                        //$(this).data('datetimepicker').hide();
                                                                                    }).data('datetimepicker');

                                                                                    $("#EndOn_@(q.StudentId)").datetimepicker({
                                                                                        format: 'MMM DD, YYYY hh:mm a',
                                                                                        inline: false,
                                                                                        sideBySide: true
                                                                                    }).on('dp.change', function (selected) {
                                                                                        $("#StartOn_@(q.StudentId)").datetimepicker('maxDate', moment(selected.date.valueOf()));
                                                                                        //$(this).data('datetimepicker').hide();
                                                                                    }).data('datetimepicker');


                                                                                    //$("#StartOn_@(q.StudentId)").datetimepicker('maxDate', moment($("#StringEndTime").val()));
                                                                                    //$("#EndOn_@(q.StudentId)").datetimepicker('minDate', moment($("#StringStartTime").val()));
                                                                                    //$("#StartOn_@(q.StudentId)").datepicker('setDate', moment($("#StringStartTime").val()));
                                                                                    //$("#EndOn_@(q.StudentId)").datepicker('setDate', moment($("#StringEndTime").val()));
                                                                                });
                                                                            </script>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </td>
                                                            @{index += 1;}
                                                            <td>
                                                                <select id="GradeSystemId_@(q.StudentId)" class="form-control">
                                                                    <option value="">Select Grade System</option>
                                                                    @foreach (var system in q.AvailableGradeSystem)
                                                                    {
                                                                        <option @(q.GradeSystemId.ToString() == system.Value ? "selected=selected" : "") value="@(system.Value)">@(system.Text)</option>
                                                                    }
                                                                </select>
                                                                @if (Model.List.IndexOf(q) == 0)
                                                                {
                                                                    <input type="button" class="btn btn-dark btn-sm" style="display:none;" value="Apply To All" id="btn-grade-system" />
                                                                }
                                                            </td>
                                                            @{index += 1;}
                                                            <td class="text-center">
                                                                <select id="ResultStatusId_@(q.StudentId)" class="form-control">
                                                                    <option value="">Select Result Status</option>
                                                                    @foreach (var system in q.AvailableResultStatuses)
                                                                    {
                                                                        <option @(q.ResultStatusId.ToString() == system.Value ? "selected=selected" : "") value="@(system.Value)">@(system.Text)</option>
                                                                    }
                                                                </select>
                                                                @if (Model.List.IndexOf(q) == 0)
                                                                {
                                                                    <input type="button" class="btn btn-dark btn-sm" style="display:none;" value="Apply To All" id="btn-result-status" />
                                                                }
                                                            </td>
                                                            @{index += 1;}
                                                            <td>
                                                                <input type="checkbox" tabindex="@(index.ToString())" id="IsExpired_@(q.StudentId)" name="IsExpired_@(q.StudentId)" value="@(q.IsExpired ? "true" : "false")" @(((q.EndOn != null && q.EndOn.Value.Date < DateTime.Now.Date) || q.IsExpired) ? "checked=checked" : "") />
                                                                <label for="IsExpired_@(q.StudentId)"></label>
                                                            </td>
                                                            <td>
                                                                <input type="checkbox" tabindex="@(index.ToString())" id="IsCompleted_@(q.StudentId)" name="IsCompleted_@(q.StudentId)" value="@(q.IsCompleted ? "true" : "false")" @(q.IsCompleted ? "checked=checked" : "") />
                                                                <label for="IsCompleted_@(q.StudentId)"></label>
                                                            </td>
                                                            <td>
                                                                <a class="btn btn-dark btn-sm" target="_blank" href="@Url.ActionEnc("AssessmentUrl", "GetAssessmentExam", new { studentid = q.StudentId, assessmentid=q.AssessmentId })">Start Exam</a>
                                                                <input type="hidden" name="Url_@(q.StudentId)" id="Url_@(q.StudentId)" value="@(Url.ActionEnc("AssessmentUrl", "GetAssessmentExam", new { studentid = q.StudentId, assessmentid=q.AssessmentId }))" />
                                                            </td>
                                                        </tr>
                                                                }
                                                </tbody>
                                                @if (Model.List.Count > 0)
                                                {
                                                    <tfoot>
                                                        <tr>
                                                            <td colspan="6" class="text-left">
                                                                <input id="btn-final-submit" class="btn btn-primary" type="submit" value="Submit" />
                                                            </td>
                                                        </tr>
                                                    </tfoot>
                                                }
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                                                                }
        </section>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $("li.nav-item").removeClass("active");
        $("span.nav-title:contains('Assessments')").closest("li").addClass("active");

        $('#allcheck').on('click', function () {
            $('input[type="checkbox"][class=table-check-input]').prop('checked', this.checked);
            $("input[type=submit]").attr("disabled", false);
        });
        $('.custom-table tbody').on('change', 'input[type="checkbox"][class=table-check-input]', function () {
            var allchecked = true;
            var options = $('.custom-table tbody input[type="checkbox"][class=table-check-input]');
            var count = 0;
            for (var a = 0; a < options.length; a++) {
                if (!$(options[a]).prop("checked")) {
                    allchecked = false;
                    break;
                }
                else {
                    count += 1;
                }
            }

            if (allchecked) {
                $('#allcheck').prop('checked', true);
            }
            else {
                $('#allcheck').prop('checked', false);
            }

            CheckValidations();
        });

        $('.custom-table tbody tr:first-child input[type=text][id^=StartOn_]').datetimepicker().on('dp.change', function (e) {
            CheckValidations();
        });

        $('.custom-table tbody tr:first-child input[type=text][id^=EndOn_]').datetimepicker().on('dp.change', function (e) {
            var dtExpired = $($(this).closest('tr').find('input[type=checkbox][id^=IsExpired_]')[0]);
            if (moment($(this).val()) < moment()) {
                $(dtExpired).prop('checked', true).val('true');
            }
            else if (moment($(this).val()) > moment()) {
                $(dtExpired).prop('checked', false).val('false');
            }
            CheckValidations();
        });

        $(document).on("click", "input[type=submit][id=btn-final-submit]", function (e) {
            var allchecked = true;
            var options = $('.custom-table tbody input[type="checkbox"][class=table-check-input]');
            var count = 0;
            for (var a = 0; a < options.length; a++) {
                if (!$(options[a]).prop("checked")) {
                    allchecked = false;
                    break;
                }
                else {
                    count += 1;
                }
            }

            if ($('.custom-table tbody input[type="checkbox"][class=table-check-input]:checked').length == 0) {
                setTimeout(function () {
                    $.gritter.add({
                        title: "Failure",
                        text: "Please select a student!",
                        sticky: !0,
                        time: "",
                        class_name: "my-sticky-class"
                    });
                },
                1e3);
                e.preventDefault();
            }
            else {
                CheckValidations();
            }
        });

        $(document).on('change', '.custom-table tbody tr:first-child select[id^=GradeSystemId_]', function (e) {
            if ($(this).val() != null && $(this).val() != "") {
                $("#btn-grade-system").show();
            }
            else {
                $("#btn-grade-system").hide();
            }

            CheckValidations();
        });

        $(document).on('change', '.custom-table tbody tr:first-child select[id^=ResultStatusId_]', function (e) {
            if ($(this).val() != null && $(this).val() != "") {
                $("#btn-result-status").show();
            }
            else {
                $("#btn-result-status").hide();
            }
            CheckValidations();
        });

        $(document).on("click", "#btn-grade-system", function () {
            var dtGradeSystem = $($(this).closest('tr').find('select[id^=GradeSystemId_]')[0]).val();
            var selects = $("select[id^=GradeSystemId_]");
            for (var x = 0; x < selects.length; x++) {
                $(selects[x]).val(dtGradeSystem);
            }
            CheckValidations();
        });

        $(document).on("click", "#btn-result-status", function () {
            var dtResultStatus = $($(this).closest('tr').find('select[id^=ResultStatusId_]')[0]).val();
            var selects = $("select[id^=ResultStatusId_]");
            for (var x = 0; x < selects.length; x++) {
                $(selects[x]).val(dtResultStatus);
            }

            CheckValidations();
        });

        $(document).on("click", "#search-students", function (e) {
            if ($("#ClassDivisionId").val() != null && $("#ClassDivisionId").val() != "") {
                $("form").submit();
            }
            else {
                setTimeout(function () {
                    $.gritter.add({
                        title: "Failure",
                        text: "Please select class-division!",
                        sticky: !0,
                        time: "",
                        class_name: "my-sticky-class"
                    });
                },
                1e3);
                e.preventDefault();
            }
        });

        $(document).on("change", ".custom-table tbody tr:first-child input[type=checkbox][id^=IsExpired_]", function (e) {
            var dtEndDate = moment($($(this).closest('tr').find('input[type=text][id^=EndOn_]')[0]).val());
            if ($(this).prop("checked")) {
                if (dtEndDate > moment()) {
                    $(this).attr('checked', false).val('false');
                }
            }
            else {
                if (dtEndDate < moment()) {
                    $(this).attr('checked', true).val('true');
                }
            }
        });

    });

    function CheckValidations() {
        var valid = true;
        var options = $('.custom-table tbody input[type="checkbox"][class=table-check-input]');
        for (var a = 0; a < options.length; a++) {
            if ($(options[a]).prop("checked")) {
                var startDate = $($(options[a]).closest('tr').find('input[type=text][id^=StartOn_]')[0]).val();
                var endDate = $($(options[a]).closest('tr').find('input[type=text][id^=EndOn_]')[0]).val();
                var gradeSystem = $($(options[a]).closest('tr').find('select[id^=GradeSystemId_]')[0]).val();
                var resultStatus = $($(options[a]).closest('tr').find('select[id^=ResultStatusId_]')[0]).val();
                if ((startDate == null || startDate === "") || (endDate == null || endDate === "") || (gradeSystem == null || gradeSystem === "") || (resultStatus == null || resultStatus === "")) {
                    valid = false;
                }
                break;
            }
        }

        if (valid) {
            $("input[type=submit][id=btn-final-submit]").attr("disabled", false);
        }
        else {
            $("input[type=submit][id=btn-final-submit]").attr("disabled", true);
        }
    }
</script>
