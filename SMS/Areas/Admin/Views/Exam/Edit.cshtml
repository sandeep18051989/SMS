@model SMS.Models.ExamModel
@using EF.Services;
@{
    ViewBag.Title = "Edit Exam";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}
<div class="row">
    <div class="col-md-12 mr-4">
        <section class="edit-form">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.Id)
                <div class="row">
                    <div id="admin-page-header" class="col-xs-12 col-md-12">
                        <h3 class="section-heading mr-auto">EDIT EXAM</h3>
                        <button type="submit" name="save" class="btn btn-primary mr-auto">
                            <i class="fa fa-save">&nbsp;&nbsp;</i>Save
                        </button>&nbsp;&nbsp;
                        <button type="submit" value="Create" name="save-continue" class="btn btn-primary mr-auto">
                            <i class="fa fa-save">&nbsp;&nbsp;</i>Save & Continue
                        </button>&nbsp;&nbsp;<span id="exam-delete" class="btn btn-danger"><i class="fa fa-trash-o"></i> Delete</span>
                    </div>
                </div>
                    <div class="row">
                        <div class="col-12 my-3">
                            <div class="tabs-wrapper">
                                <ul class="nav classic-tabs tabs-pink" role="tablist">
                                    <li class="nav-item">
                                        <a class="nav-link waves-light active waves-effect waves-light" data-toggle="tab" href="#update-exam" role="tab">
                                            <i class="fa fa-user fa-2x" aria-hidden="true"></i>
                                            <br> Update Exam
                                        </a>
                                    </li>
                                </ul>
                            </div>
                            <div class="tab-content card">
                                <div class="tab-pane fade in show active" id="update-exam" role="tabpanel">
                                    <div class="row">
                                        <div class="col-md-12">
                                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="row text-left">
                                                <div class="col-md-6 mb-4">
                                                    <div class="md-form">
                                                        @Html.EditorFor(model => model.ExamName, new { htmlAttributes = new { @class = "form-control", @tabindex = "1", @maxlength = "20", @title = "Name" } })
                                                        @Html.LabelFor(model => model.ExamName, htmlAttributes: new { @class = "control-label", @data_error = "wrong", @data_success = "right" })
                                                        @Html.ValidationMessageFor(model => model.ExamName, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row text-left">
                                                <div class="col-md-6 mb-4">
                                                    <div class="md-form">
                                                        @Html.DropDownListFor(model => model.AcadmicYearId, Model.AvailableAcadmicYears, new { @class = "mdb-select", @tabindex = "2" })
                                                        @Html.LabelFor(model => model.AcadmicYearId, "Acadmic Year", htmlAttributes: new { @class = "control-label" })
                                                        @Html.ValidationMessageFor(model => model.AcadmicYearId, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row text-left">
                                                <div class="col-md-6 mb-4">
                                                    <div class="md-form date start-date">
                                                        <i class="fa fa-calendar prefix"></i>
                                                        @Html.EditorFor(model => model.StartDate, "DateRange.cshtml")
                                                        @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label" })
                                                        @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row text-left">
                                                <div class="col-md-6 mb-4">
                                                    <div class="md-form date end-date">
                                                        <i class="fa fa-calendar prefix"></i>
                                                        @Html.EditorFor(model => model.EndDate, "DateRange.cshtml")
                                                        @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label" })
                                                        @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row text-left">
                                                <div class="col-md-6 mb-4">
                                                    <div class="md-form">
                                                        @Html.EditorFor(model => model.PassingMarks, new { htmlAttributes = new { @class = "form-control", @tabindex = "5", @min = "1", @maxlength = "10", @type = "number" } })
                                                        @Html.LabelFor(model => model.PassingMarks, "Passing Marks", htmlAttributes: new { @class = "control-label" })
                                                        @Html.ValidationMessageFor(model => model.PassingMarks, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row text-left">
                                                <div class="col-md-6 mb-4">
                                                    <div class="md-form">
                                                        @Html.EditorFor(model => model.MaxMarks, new { htmlAttributes = new { @class = "form-control", @tabindex = "6", @min = "1", @maxlength = "10", @type = "number" } })
                                                        @Html.LabelFor(model => model.MaxMarks, "Maximum Marks", htmlAttributes: new { @class = "control-label" })
                                                        @Html.ValidationMessageFor(model => model.MaxMarks, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-6 mb-4">
                                                    <input type="checkbox" tabindex="7" id="IsActive" name="IsActive" value="@(Model.IsActive ? "True" : "False")" @(Model.IsActive ? "checked=checked" : "") />
                                                    @Html.LabelFor(model => model.IsActive, "Active", htmlAttributes: new { })
                                                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
            }
        </section>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $("li.nav-item").removeClass("active");
        $("span.nav-title:contains('Exams')").closest("li").addClass("active");

        if ($("#IsActive").val() == "True") {
            $("#IsActive").attr('checked', true).val(true);
        }
        else {
            $("#IsActive").attr('checked', false).val(false);
        }

        $("#IsActive").change(function () {
            if ($(this).prop('checked')) {
                $(this).attr('checked', true).val(true);
            }
            else {
                $(this).attr('checked', false).val(false);
            }
        });

        // Get the elements
        var from_input = $('.start-date input[type=text]').pickadate(),
            from_picker = from_input.pickadate('picker');
        var to_input = $('.end-date input[type=text]').pickadate(),
            to_picker = to_input.pickadate('picker');

        // Check if there’s a “from” or “to” date to start with and if so, set their appropriate properties.
        if (from_picker.get('value')) {
            to_picker.set('min', from_picker.get('select'));
        }
        if (to_picker.get('value')) {
            from_picker.set('max', to_picker.get('select'));
        }

        // Apply event listeners in case of setting new “from” / “to” limits to have them update on the other end. If ‘clear’ button is pressed, reset the value.
        from_picker.on('set',
            function (event) {
                if (event.select) {
                    to_picker.set('min', from_picker.get('select'));
                } else if ('clear' in event) {
                    to_picker.set('min', false);
                }
            });
        to_picker.on('set',
            function (event) {
                if (event.select) {
                    from_picker.set('max', to_picker.get('select'));
                } else if ('clear' in event) {
                    from_picker.set('max', false);
                }
            });

    });
</script>
@Html.DeleteConfirmation("exam-delete")
