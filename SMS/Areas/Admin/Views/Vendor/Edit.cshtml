@model SMS.Models.VendorModel
@using EF.Services;
@{
	ViewBag.Title = "Edit Vendor";
	Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}
<div class="row">
	<div class="col-md-12 mr-4">
		<section class="edit-form">
			@using (Html.BeginForm())
			{
				@Html.AntiForgeryToken()
				@Html.HiddenFor(model => model.Id)
				<div class="row">
					<div id="admin-page-header" class="col-xs-12 col-md-12">
						<h3 class="section-heading mr-auto">EDIT VENDOR</h3>
						<button type="submit" name="save" class="btn btn-primary mr-auto">
							<i class="fa fa-save">&nbsp;&nbsp;</i>Save
						</button>&nbsp;&nbsp;
						<button type="submit" value="Create" name="save-continue" class="btn btn-primary mr-auto">
							<i class="fa fa-save">&nbsp;&nbsp;</i>Save & Continue
						</button>&nbsp;&nbsp;<span id="news-delete" class="btn btn-danger"><i class="fa fa-trash-o"></i> Delete</span>
					</div>
				</div>
				<div class="row">
					<div class="col-12 my-3">
						<div class="tabs-wrapper">
							<ul class="nav classic-tabs tabs-pink" role="tablist">
								<li class="nav-item">
									<a class="nav-link waves-light active waves-effect waves-light" data-toggle="tab" href="#create-vendor" role="tab">
										<i class="fa fa-2x fa-user" aria-hidden="true"></i>
										<br> Vendor
									</a>
								</li>
								<li class="nav-item">
									<a class="nav-link waves-light waves-effect waves-light" data-toggle="tab" href="#upload-products" role="tab">
										<i class="fa fa-2x fa-suitcase" aria-hidden="true"></i>
										<br> Products
									</a>
								</li>
							</ul>
						</div>
						<div class="tab-content card">
							<div class="tab-pane fade in show active" id="create-news" role="tabpanel">
								<div class="row">
									<div class="col-md-12">
										@Html.ValidationSummary(true, "", new { @class = "text-danger" })
									</div>
								</div>
								<div class="row">
									<div class="col-md-12">
										<div class="row text-left">
											<div class="col-md-6 mb-4">
												<div class="md-form">
													<i class="fa fa-registered prefix" aria-hidden="true"></i>
													@Html.EditorFor(model => model.RegNumber, new { htmlAttributes = new { @class = "form-control", @tabindex = "1", @maxlength = "100", @title = "Registration Number" } })
													@Html.LabelFor(model => model.RegNumber, "Registration Number", htmlAttributes: new { @class = "control-label", @data_error = "wrong", @data_success = "right" })
													@Html.ValidationMessageFor(model => model.RegNumber, "", new { @class = "text-danger" })
												</div>
											</div>
										</div>
										<div class="row text-left">
											<div class="col-md-6 mb-4">
												<div class="md-form">
													<i class="fa fa-play-circle-o prefix"></i>
													@Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @tabindex = "2", @maxlength = "200", @title = "Name" } })
													@Html.LabelFor(model => model.Name, "Name", htmlAttributes: new { @class = "control-label", @data_error = "wrong", @data_success = "right" })
													@Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
												</div>
											</div>
										</div>
										<div class="row text-left">
											<div class="col-md-8 mb-4">
												<div class="md-form">
													<i class="fa fa-map prefix" aria-hidden="true"></i>
													@Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", @tabindex = "3", @maxlength = "500", @title = "Address" } })
													@Html.LabelFor(model => model.Address, "Name", htmlAttributes: new { @class = "control-label", @data_error = "wrong", @data_success = "right" })
													@Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
												</div>
											</div>
										</div>
										<div class="row text-left">
											<div class="col-md-6 mb-4">
												<div class="md-form date end-date">
													<i class="fa fa-calendar prefix"></i>
													@Html.EditorFor(model => model.VDate, "DateRange.cshtml")
													@Html.LabelFor(model => model.VDate, htmlAttributes: new { @class = "control-label", @readonly = "readonly", @title = "Registered On" })
													@Html.ValidationMessageFor(model => model.VDate, "", new { @class = "text-danger" })
												</div>
											</div>
										</div>
										<div class="row text-left">
											<div class="col-md-6 mb-4">
												<div class="md-form">
													<i class="fa fa-mobile-phone prefix"></i>
													@Html.EditorFor(model => model.MobileContact, new { htmlAttributes = new { @class = "form-control", @tabindex = "5", @maxlength = "10", @title = "Mobile" } })
													@Html.LabelFor(model => model.MobileContact, htmlAttributes: new { @class = "control-label" })
													@Html.ValidationMessageFor(model => model.MobileContact, "", new { @class = "text-danger" })
												</div>
											</div>
										</div>
										<div class="row text-left">
											<div class="col-md-6 mb-4">
												<div class="md-form date start-date">
													<i class="fa fa-phone prefix"></i>
													@Html.EditorFor(model => model.OfficeContact, new { htmlAttributes = new { @class = "form-control", @tabindex = "6", @maxlength = "10", @title = "Office" } })
													@Html.LabelFor(model => model.OfficeContact, htmlAttributes: new { @class = "control-label" })
													@Html.ValidationMessageFor(model => model.OfficeContact, "", new { @class = "text-danger" })
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
							<div class="tab-pane" id="upload-products" role="tabpanel">
								@Html.Partial("_VendorProducts", Model)
							</div>
						</div>
					</div>
				</div>
			}
		</section>
	</div>
</div>
<script type="text/javascript">
	$(document).ready(function () {
		if ($("#IsActive").val()) {
			$("#IsActive").attr('checked', true).val(true);
		}
		else {
			$("#IsActive").attr('checked', false).val(false);
		}

		$("#IsActive").change(function () {
			if ($(this).prop('checked')) {
				$(this).attr('checked', true).val(true);
			}
			else {
				$(this).attr('checked', false).val(false);
			}
		});
	});

	// Get the elements
	var from_input = $('.start-date input[type=text]').pickadate(),
		from_picker = from_input.pickadate('picker');
	var to_input = $('.end-date input[type=text]').pickadate(),
		to_picker = to_input.pickadate('picker');

	// Check if there’s a “from” or “to” date to start with and if so, set their appropriate properties.
	if (from_picker.get('value')) {
		to_picker.set('min', from_picker.get('select'));
	}
	if (to_picker.get('value')) {
		from_picker.set('max', to_picker.get('select'));
	}

	// Apply event listeners in case of setting new “from” / “to” limits to have them update on the other end. If ‘clear’ button is pressed, reset the value.
	from_picker.on('set',
		function (event) {
			if (event.select) {
				to_picker.set('min', from_picker.get('select'));
			} else if ('clear' in event) {
				to_picker.set('min', false);
			}
		});
	to_picker.on('set',
		function (event) {
			if (event.select) {
				from_picker.set('max', to_picker.get('select'));
			} else if ('clear' in event) {
				from_picker.set('max', false);
			}
		});
</script>
@Html.DeleteConfirmation("news-delete")
